import pandas as pd
import os
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv("../../../data/raw/raw.csv")
# df = pd.read_csv("../../../data/raw/chotot_xe_data.csv")


# In s·ªë d√≤ng v√† s·ªë c·ªôt
print(f"S·ªë b·∫£n ghi: {df.shape[0]}")  # 19870
print(f"S·ªë c·ªôt: {df.shape[1]}")  # 29

# In t√™n c√°c c·ªôt
print("\nT√™n c√°c c·ªôt:")
print(df.columns.tolist())

# C√°c c·ªôt c·∫ßn gi·ªØ
columns_to_keep = [
    "brand",
    "model",
    "year",
    "price",
    "mileage",
    "fuel_type",
    "transmission",
    "owners",
    "origin",
    "car_type",
    "seats",
    "condition",
]

# Gi·ªØ l·∫°i c√°c c·ªôt c·∫ßn thi·∫øt
df = df[columns_to_keep]

# Chuy·ªÉn c·ªôt 'price' xu·ªëng cu·ªëi
if "price" in df.columns:
    price_col = df["price"]
    df = df.drop(columns=["price"])
    df["price"] = price_col


# In t√™n c√°c c·ªôt
print(f"S·ªë b·∫£n ghi: {df.shape[0]}")
print(f"S·ªë c·ªôt: {df.shape[1]}")
print(df.columns.tolist())
print("---------------------------------------")
print(df.info())
print("---------------------------------------")
print(df.describe())
print("---------------------------------------")
print("L∆∞·ª£ng data b·ªã thi·∫øu\n")
print(df.isnull().sum())

# S·ªë l∆∞·ª£ng null: year-20, mileage-1774, owners 11080, seats-2129

# In c√°c gi√° tr·ªã kh√°c nhau c·ªßa t·ª´ng c·ªôt
for col in df.columns:
    unique_vals = df[col].unique()
    print(f"--- {col} ({len(unique_vals)} gi√° tr·ªã) ---")
    print(unique_vals)
    print()


# In s·ªë l∆∞·ª£ng gi√° tr·ªã duy nh·∫•t c·ªßa t·ª´ng c·ªôt
for col in df.columns:
    print(f"\nüü¶ C·ªôt: {col}")
    print(f"S·ªë l∆∞·ª£ng gi√° tr·ªã kh√°c nhau: {df[col].nunique()}")
    print("Gi√° tr·ªã v√† s·ªë l∆∞·ª£ng t∆∞∆°ng ·ª©ng:")
    print(df[col].value_counts())
    print("---------------------------------------------------")


# *** Xem ph√¢n b·ªë nƒÉm theo th·ª© t·ª± g·∫ßn ƒë·∫øn xa ***
year_counts = df["year"].value_counts()
year_counts = year_counts.sort_index(ascending=False)
print(year_counts)
# => nh·∫≠n th·∫•y l√† t·ª´ nƒÉm 2000 tr·ªü v·ªÅ tr∆∞·ªõc s·ªë b·∫£n ghi √≠t => x√≥a
df = df[df["year"] >= 2000]

# X√≥a c√°c origin ch∆∞a c·∫≠p nh·∫≠t
df = df[df["origin"] != "ƒêang c·∫≠p nh·∫≠t"]
# X√≥a c√°c car_type c√≥ gi√° tr·ªã --
df = df[df["car_type"] != "--"]


# Do owner ch·ªâ c√≥ 1 gi√° tr·ªã l√† 1 v√† null nhi·ªÅu => x√≥a
df = df.drop(columns=["owners"])


# x√≥a b·∫£n ghi c√≥ null
print(f"S·ªë b·∫£n ghi sau khi l·ªçc ·ªïn ƒë·ªãnh: {df.shape[0]}")
print("S·ªë d√≤ng c√≥ √≠t nh·∫•t m·ªôt gi√° tr·ªã null:", df.isnull().any(axis=1).sum())
df = df.dropna()
null_rows_count = df.isna().any(axis=1).sum()
print(f"S·ªë b·∫£n ghi sau khi h·∫øt null: {df.shape[0]}")


duplicate_count = df.duplicated().sum()
print(f"S·ªë b·∫£n ghi tr√πng l·∫∑p: {duplicate_count}")

df = df.drop_duplicates()


# C√°c c·ªôt category x√≥a nh·ªØng c√°i m√† c√≥ √≠t h∆°n 10 b·∫£n ghi
columns_to_remove_less_than_10 = [
    "brand",
    "model",
    "transmission",
    "origin",
    "car_type",
]

prev_shape = None
current_shape = df.shape[0]

# D√πng while ƒë·ªÉ tr√°nh hi·ªáu ·ª©ng lan truy·ªÅn (cascade effect)
while prev_shape != current_shape:
    prev_shape = current_shape
    for col in columns_to_remove_less_than_10:
        value_counts = df[col].value_counts()
        values_to_keep = value_counts[value_counts >= 10].index
        df = df[df[col].isin(values_to_keep)]
    current_shape = df.shape[0]


# In l·∫°i s·ªë l∆∞·ª£ng gi√° tr·ªã duy nh·∫•t c·ªßa t·ª´ng c·ªôt
for col in df.columns:
    print(f"\nüü¶ C·ªôt: {col}")
    print(f"S·ªë l∆∞·ª£ng gi√° tr·ªã kh√°c nhau: {df[col].nunique()}")
    print("Gi√° tr·ªã v√† s·ªë l∆∞·ª£ng t∆∞∆°ng ·ª©ng:")
    print(df[col].value_counts())
    print("---------------------------------------------------")

# Nh·∫≠n th·∫•y sau khi x·ª≠ l√Ω th√¨ c·ªôt condition c√≤n m√¨nh gi√° tr·ªã "ƒë√£ s·ª≠ d·ª•ng" => x√≥a c·ªôt
df = df.drop(columns=["condition"])

print("S·ªë d√≤ng c√≥ √≠t nh·∫•t m·ªôt gi√° tr·ªã null:", df.isnull().any(axis=1).sum())
print(f"S·ªë b·∫£n ghi tr√πng l·∫∑p: {df.duplicated().sum()}")
print(f"S·ªë b·∫£n ghi sau khi ti·ªÅn x·ª≠ l√Ω: {df.shape[0]}")
print(f"S·ªë c·ªôt: {df.shape[1]}")
print(df.columns.tolist())

# X·ª≠ l√Ω outlier
max_price = df["price"].max()
min_price = df["price"].min()

print(f"Gi√° tr·ªã l·ªõn nh·∫•t c·ªßa price: {max_price:,.0f} VND")  # 20ty
print(f"Gi√° tr·ªã nh·ªè nh·∫•t c·ªßa price: {min_price:,.0f} VND")  # 5tr

# Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì boxplot ban ƒë·∫ßu
# plt.figure(figsize=(10, 4))
# sns.boxplot(x=df["price"])
# plt.title("Boxplot tr∆∞·ªõc khi x·ª≠ l√Ω outlier")
# plt.show()


count = df[df["price"] > 5000000000].shape[0]
print(f"S·ªë l∆∞·ª£ng b·∫£n ghi c√≥ gi√° > 5 t·ª∑ l√†: {count}")  # 22

# X√≥a b·∫£n ghi c√≥ gi√° > 5 ty
df = df[df["price"] < 5000000000]

filtered_df = df[df["price"] <= 1_000_000_000]

# sns.histplot(data=filtered_df, x="price", bins=50, kde=True)
# plt.title("Ph√¢n b·ªë Price (0 - 1 t·ª∑)")
# plt.xlabel("Price")
# plt.ylabel("S·ªë l∆∞·ª£ng")
# plt.show()

count = df[df["price"] < 100000000].shape[0]
print(f"S·ªë l∆∞·ª£ng b·∫£n ghi c√≥ gi√° < 100 tr l√†: {count}")  # 532
df = df[df["price"] > 100000000]
print(f"S·ªë b·∫£n ghi sau khi x·ª≠ l√Ω outlier: {df.shape[0]}")  # 11523


df.to_csv("../../../data/preprocessing/cleaned.csv", index=False)
